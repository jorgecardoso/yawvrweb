!function(e,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n();else if("function"==typeof define&&define.amd)define([],n);else{var t=n();for(var o in t)("object"==typeof exports?exports:e)[o]=t[o]}}(this,(()=>(()=>{if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");return AFRAME.registerComponent("yawvr",{schema:{appname:{type:"string",default:"myApp"},framerate:{type:"number",default:1}},multiple:!1,init:function(){this._ready=!1;let e=this;this._lastT=0,new Promise((function(e,n){let t=2;console.log("Using Service Discovery: https://hmd-link-service.glitch.me/"),setTimeout((function o(){fetch("https://hmd-link-service.glitch.me/").then((function(e){return e.json()})).then((function(n){n.yawmiddleware?(console.log("Yaw Middleware found through service discovery: ",n.yawmiddleware),e(n.yawmiddleware.address)):(t=Math.min(2*t,30),console.log("Yaw Middleware not found through service discovery. Trying again in ",t," seconds."),setTimeout(o,1e3*t))})).catch((function(e){console.log(e),n(e)}))}),t)})).then((function(e){return function(e,n){return new Promise((function(t,o){console.log("Asking Yaw Middleware: ",e," for existing simulators.");let i=2;setTimeout((function c(){fetch(e+"/simulators").then((function(e){return e.json()})).then((function(o){let r=null;o.length>0&&(console.log("Found simulators: ",o),o.forEach((e=>{e.simulatorName.match(n)&&(console.log("Found simulator matching '",n,"': ",e),r=e)}))),r?t([e,r]):(i=Math.min(2*i,30),console.log("No simulators found through middleware. Asking again in ",i," seconds."),setTimeout(c,1e3*i))})).catch((function(e){console.log(e),o(e)}))}),i)}))}(e,/.*/)})).then((function([e,n]){return function(e,n){return new Promise(((t,o)=>{console.log("Connecting to: "+n.simulatorId),fetch(e+"/connect/"+n.simulatorId).then((function(e){return e.json()})).then((function(o){console.log("Connected to: "+n.simulatorId),t([e,n])})).catch((e=>{console.log(e),o(e)}))}))}(e,n)})).then((function([e,n]){return function(e,n){return new Promise(((t,o)=>{let i="myApp"+crypto.randomUUID(),c=!1;console.log("Checking in app: ",i),fetch(e+"/checkin/"+i).then((function(e){return e.json()})).then((function(r){"AVAILABLE"==r.devicestatus&&(c=!0),c?(console.log("Checked in: ",r),t([e,n,i])):(console.log("Could not check in: ",r),o(r))})).catch((function(e){console.log(e),o(error)}))}))}(e,n)})).then((function([e,n,t]){return function(e,n,t){return window.addEventListener("beforeunload",(n=>{fetch(e+"/stop/",{keepalive:!0}).then((function(e){return e.json()})).then((function(e){console.log(e)})).catch((function(e){console.log(e)})),fetch(e+"/exit/",{keepalive:!0}).then((function(e){return e.json()})).then((function(e){console.log(e)})).catch((function(e){console.log(e)}))})),Promise.resolve([e,n,t])}(e,n,t)})).then((function([e,n,t]){return function(e,n,t){return new Promise(((o,i)=>{console.log("Starting app: ",t),fetch(e+"/start/").then((function(e){return e.json()})).then((function(c){"START"==c.commandreceived?(console.log("Started"),o([e,n,t])):(console.log("Could not start",c),i(c))})).catch((function(e){console.log(e),i(error)}))}))}(e,n,t)})).then((function([n,t,o]){e._ready=!0,e._middlewareAddress=n})).catch((e=>{console.log(e)}))},update:function(e){this._interval=1e3/this.data.framerate},remove:function(){console.log("removed")},tick:function(e){if(this._ready&&e-this._lastT>=this._interval){let n=THREE.MathUtils.radToDeg(this.el.object3D.rotation.y),t=THREE.MathUtils.radToDeg(this.el.object3D.rotation.x),o=THREE.MathUtils.radToDeg(this.el.object3D.rotation.z);fetch(this._middlewareAddress+"/SET_POSITION/"+n+"/"+t+"/"+o),this._lastT=e}},pause:function(){},play:function(){},events:{}}),{}})()));