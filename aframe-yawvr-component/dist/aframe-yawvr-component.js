/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("/* global AFRAME */\r\n\r\nif (typeof AFRAME === 'undefined') {\r\n  throw new Error('Component attempted to register before AFRAME was available.');\r\n}\r\n\r\n/**\r\n * Yaw VR component for A-Frame.\r\n */\r\nAFRAME.registerComponent('yawvr', {\r\n  schema: {\r\n    appname: {type: 'string', default: 'myApp'},\r\n    framerate: {type: 'number', default: 1}\r\n  },\r\n\r\n  /**\r\n   * Set if component needs multiple instancing.\r\n   */\r\n  multiple: false,\r\n\r\n  /**\r\n   * Called once when component is attached. Generally for initial setup.\r\n   */\r\n  init: function () {\r\n    this._ready = false;\r\n    this._lastT = 0; // Timestamp of last position sent to simulator. To keep framerate\r\n\r\n    let _this = this;\r\n\r\n    this._registeredEventsPromise =findMiddleware()\r\n        .then(function(middlewareAddress){\r\n          _this._middlewareAddress = middlewareAddress;\r\n          return findSimulator(middlewareAddress, /.*/);\r\n        })\r\n        .then(function([middlewareAddress, simulator]){\r\n          return connect(middlewareAddress, simulator);\r\n        })\r\n        .then(function ([middlewareAddress, simulator]){\r\n          return checkIn(middlewareAddress, simulator, _this.data.appname);\r\n        })\r\n        .then(function ([middlewareAddress, simulator, appName]){\r\n          return registerUnloadEvents(middlewareAddress, simulator, appName);\r\n        })\r\n        /*.then(function ([middlewareAddress, simulator, appName]){\r\n          return start(middlewareAddress, simulator, appName);\r\n        })\r\n        .then(function ([middlewareAddress, simulator, appName]){\r\n          _this._ready = true;\r\n\r\n        })*/\r\n        .catch(error=>{\r\n          console.log(\"Init: \", error);\r\n          return Promise.reject(error);\r\n        });\r\n\r\n  },\r\n\r\n  /**\r\n   * Called when component is attached and when component data changes.\r\n   * Generally modifies the entity based on the data.\r\n   */\r\n  update: function (oldData) {\r\n    this._interval = 1000/this.data.framerate;\r\n  },\r\n\r\n  /**\r\n   * Called when a component is removed (e.g., via removeAttribute).\r\n   * Generally undoes all modifications to the entity.\r\n   */\r\n  remove: function () {\r\n      let _this = this;\r\n      this._registeredEventsPromise\r\n          .then(function ([middlewareAddress, simulator, appName]){\r\n              _this.ready = false;\r\n              stop(middlewareAddress, simulator, appName);\r\n              exit(middlewareAddress, simulator, appName);\r\n          })\r\n          .catch(error=>{\r\n              console.log(error);\r\n          });\r\n  },\r\n\r\n  /**\r\n   * Called on each scene tick.\r\n   */\r\n   tick: function (t) {\r\n     if (!this._ready ) return;\r\n     if (t-this._lastT >= this._interval) {\r\n       let y = THREE.MathUtils.radToDeg(this.el.object3D.rotation.y)\r\n       let p = THREE.MathUtils.radToDeg(this.el.object3D.rotation.x);\r\n       let r = THREE.MathUtils.radToDeg(this.el.object3D.rotation.z);\r\n       fetch(this._middlewareAddress+\"/SET_POSITION/\" + y +\"/\" +  p + \"/\" + r ) // console.log(y, p, r)l\r\n       this._lastT = t;\r\n     }\r\n  },\r\n\r\n  /**\r\n   * Called when entity pauses.\r\n   * Use to stop or remove any dynamic or background behavior such as events.\r\n   */\r\n  pause: function () {\r\n    let _this = this;\r\n    this._registeredEventsPromise\r\n        .then(function ([middlewareAddress, simulator, appName]){\r\n          return stop(middlewareAddress, simulator, appName);\r\n        })\r\n        .then(function ([middlewareAddress, simulator, appName]){\r\n          _this._ready = false;\r\n        })\r\n        .catch(error=>{\r\n          console.log(error);\r\n        });\r\n  },\r\n\r\n  /**\r\n   * Called when entity resumes.\r\n   * Use to continue or add any dynamic or background behavior such as events.\r\n   */\r\n  play: function () {\r\n    let _this = this;\r\n    this._registeredEventsPromise\r\n        .then(function ([middlewareAddress, simulator, appName]){\r\n          return start(middlewareAddress, simulator, appName);\r\n        })\r\n        .then(function ([middlewareAddress, simulator, appName]){\r\n          _this._ready = true;\r\n        })\r\n        .catch(error=>{\r\n          console.log(\"Play: \", error);\r\n        });\r\n  },\r\n\r\n});\r\n\r\n\r\n\r\nfunction registerUnloadEvents(middlewareAddress, simulator, appName) {\r\n    console.log(\"Registering unload event.\")\r\n    window.onbeforeunload = function (event) {\r\n      console.log(\"Unloading window\");\r\n      /*stop().then(function(res){ console.log(res) });\r\n      exit().then(function(res){ console.log(res) });\r\n      event.preventDefault();\r\n      event.returnValue = true;*/\r\n\r\n    fetch(middlewareAddress+\"/stop/\",{keepalive: true})\r\n        .then(function(res){ return res.json() })\r\n        .then(function(json) { console.log(json)})\r\n        .catch(function(res){ console.log(res) })\r\n\r\n    fetch(middlewareAddress+\"/exit/\",{keepalive: true})\r\n        .then(function(res){ return res.json() })\r\n        .then(function(json) { console.log(json)})\r\n        .catch(function(res){ console.log(res) });\r\n\r\n  }\r\n    console.log(window.onbeforeunload)\r\n  return Promise.resolve([middlewareAddress, simulator, appName]);\r\n}\r\n\r\n\r\n\r\nfunction connect(middlewareAddress, simulator) {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"Connecting to: \" + simulator.simulatorId);\r\n    fetch(middlewareAddress+\"/connect/\" + simulator.simulatorId)\r\n        .then(function(resp){ return resp.json(); })\r\n        .then(function(json) {\r\n          console.log(\"Connected to: \" + simulator.simulatorId);\r\n          resolve([middlewareAddress, simulator])\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n          reject(error);\r\n        })\r\n  });\r\n}\r\n\r\n\r\nfunction checkIn(middlewareAddress, simulator, appName) {\r\n  return new Promise((resolve, reject) => {\r\n    let appId = appName+crypto.randomUUID();\r\n    let checkedIn = false;\r\n    console.log(\"Checking in app: \", appId)\r\n    fetch(middlewareAddress+\"/checkin/\"+appId)\r\n        .then(function(res){ return res.json() })\r\n        .then(function(json) {\r\n\r\n          if (json.devicestatus == 'AVAILABLE') {\r\n            checkedIn = true;\r\n          }\r\n          if (checkedIn) {\r\n            console.log(\"Checked in: \", json)\r\n            resolve([middlewareAddress, simulator, appId]);\r\n          } else {\r\n            console.log(\"Could not check in: \", json)\r\n            reject(json);\r\n          }\r\n        })\r\n        .catch(function(res){\r\n          console.log(res)\r\n          reject(error)\r\n        })\r\n  });\r\n}\r\n\r\n\r\nfunction start(middlewareAddress, simulator, appName) {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"Starting app: \", appName)\r\n    fetch(middlewareAddress+\"/start/\")\r\n        .then(function(res){ return res.json() })\r\n        .then(function(json) {\r\n          if (json.commandreceived == 'START') {\r\n            console.log(\"Started\")\r\n            resolve([middlewareAddress, simulator, appName]);\r\n          } else {\r\n            console.log(\"Could not start\", json)\r\n            reject(json);\r\n          }\r\n        })\r\n        .catch(function(res){\r\n          console.log(res)\r\n          reject(error)\r\n        })\r\n  });\r\n}\r\n\r\nfunction stop(middlewareAddress, simulator, appName) {\r\n  return new Promise((resolve, reject) => {\r\n    console.log(\"Stopping app: \", appName)\r\n    fetch(middlewareAddress+\"/stop/\",{keepalive: true})\r\n        .then(function(res){ return res.json() })\r\n        .then(function(json) {\r\n          if (json.commandreceived == 'STOP') {\r\n            console.log(\"Stopped\")\r\n            resolve([middlewareAddress, simulator, appName]);\r\n          } else {\r\n            console.log(\"Could not stop\", json)\r\n            reject(json);\r\n          }\r\n        })\r\n        .catch(function(res){\r\n          console.log(res)\r\n          reject(error)\r\n        })\r\n  });\r\n}\r\n\r\n\r\nfunction exit(middlewareAddress, simulator, appName) {\r\n    return new Promise((resolve, reject) => {\r\n        console.log(\"Exiting app: \", appName)\r\n        fetch(middlewareAddress+\"/exit/\",{keepalive: true})\r\n            .then(function(res){ return res.json() })\r\n            .then(function(json) {\r\n                if (json.commandreceived == 'EXIT') {\r\n                    console.log(\"Exited\")\r\n                    resolve([middlewareAddress, simulator, appName]);\r\n                } else {\r\n                    console.log(\"Could not exit\", json)\r\n                    reject(json);\r\n                }\r\n            })\r\n            .catch(function(res){\r\n                console.log(res)\r\n                reject(error)\r\n            })\r\n    });\r\n}\r\n\r\nfunction findMiddleware() {\r\n  return new Promise(function(resolve, reject) {\r\n    let interval = 2;\r\n    console.log(\"Using Service Discovery: https://hmd-link-service.glitch.me/\")\r\n    setTimeout(search, interval);\r\n    function search() {\r\n      fetch(\"https://hmd-link-service.glitch.me/\").then(function(page){\r\n        return page.json();\r\n      }).then(function(json){\r\n        //console.log(json);\r\n        if (json.yawmiddleware) {\r\n          console.log(\"Yaw Middleware found through service discovery: \", json.yawmiddleware);\r\n          resolve(json.yawmiddleware.address);\r\n          //begin(middleware.address);\r\n        } else {\r\n          interval = Math.min(interval *2, 30);\r\n          console.log(\"Yaw Middleware not found through service discovery. Trying again in \", interval, \" seconds.\");\r\n          setTimeout(search, interval*1000);\r\n        }\r\n      }).catch(function(error){\r\n        console.log(error);\r\n        reject(error);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nfunction findSimulator(middlewareAddress, simulatorNameRegExp) {\r\n  return new Promise(function(resolve, reject){\r\n    console.log(\"Asking Yaw Middleware: \", middlewareAddress, \" for existing simulators.\")\r\n    let interval = 2;\r\n    setTimeout(search, interval);\r\n    function search() {\r\n      fetch(middlewareAddress+\"/simulators\").then(function(data){\r\n        return data.json();\r\n      }).then(function(json){\r\n        let simulator = null;\r\n        if (json.length > 0) {\r\n          console.log(\"Found simulators: \", json);\r\n          json.forEach(sim=>{\r\n            if (sim.simulatorName.match(simulatorNameRegExp)) {\r\n              console.log(\"Found simulator matching '\", simulatorNameRegExp, \"': \", sim);\r\n              simulator = sim;\r\n            }\r\n          });\r\n          //simulator = json[0];\r\n        }\r\n        if (simulator) {\r\n          resolve([middlewareAddress, simulator]);\r\n        } else {\r\n          interval = Math.min(interval *2, 30);\r\n          console.log(\"No simulators found through middleware. Asking again in \", interval, \" seconds.\");\r\n          setTimeout(search, interval*1000);\r\n        }\r\n      }).catch(function(error){\r\n        console.log(error);\r\n        reject(error);\r\n      });\r\n    }\r\n  });\r\n}\r\n\n\n//# sourceURL=webpack://aframe-yawvr-component/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});