/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("/* global AFRAME */\r\nif (typeof AFRAME === 'undefined') {\r\n    throw new Error('Component \"yawvr\" attempted to register before AFRAME was available.');\r\n}\r\n\r\n/**\r\n * TODO:\r\n * property to specify simulator name regex (right now, it picks up the last simulator found if several are available)\r\n * connect through websocket for position messages\r\n * send vibration data\r\n */\r\n/**\r\n * Yaw VR component for A-Frame.\r\n */\r\nAFRAME.registerComponent('yawvr', {\r\n    schema: {\r\n        appname: {type: 'string', default: 'myApp'},\r\n\r\n        yawlimit: {type: 'number', default: 180},\r\n        pitchforwardlimit: {type: 'number', default: 15},\r\n        pitchbackwardlimit: {type: 'number', default: 55},\r\n        rolllimit: {type: 'number', default: 20},\r\n        motioncompensation: {type: 'boolean', default: false},\r\n\r\n        middlewareaddress: {type: 'string', default: ''},\r\n        servicediscoveryaddress: {type: 'string', default: 'https://hmd-link-service.glitch.me'},\r\n    },\r\n\r\n    /**\r\n     * Set if component needs multiple instancing.\r\n     */\r\n    multiple: false,\r\n\r\n    /**\r\n     * Called once when component is attached. Generally for initial setup.\r\n     */\r\n    init: function () {\r\n        this._ready = false;\r\n\r\n        let _this = this;\r\n\r\n\r\n        this._camera = this.el.querySelector(\"[camera],a-camera\");\r\n\r\n        if (this.data.motioncompensation) {\r\n           // this._cameraParent = this._camera.parentElement;\r\n            this._cameraParent = document.createElement(\"a-entity\");\r\n\r\n            this._camera.parentNode.replaceChild(this._cameraParent, this._camera);\r\n            this._cameraParent.appendChild(this._camera); //this._camera.parentElement;\r\n        }\r\n\r\n\r\n        let middlewarePromise = null;\r\n        if (_this.data.middlewareaddress == '') {\r\n            middlewarePromise = _this._findMiddleware(this.data.servicediscoveryaddress);\r\n        } else {\r\n            middlewarePromise = Promise.resolve(_this.data.middlewareaddress);\r\n        }\r\n        this._registeredEventsPromise = middlewarePromise\r\n            .then(function (middlewareAddress) {\r\n                _this._middlewareAddress = middlewareAddress;\r\n                return _this._findSimulator(middlewareAddress, /.*/);\r\n            })\r\n            .then(function ([middlewareAddress, simulator]) {\r\n                return _this.connect(middlewareAddress, simulator);\r\n            })\r\n            .then(function ([middlewareAddress, simulator]) {\r\n                return _this.checkIn(middlewareAddress, simulator, _this.data.appname);\r\n            })\r\n            .then(function ([middlewareAddress, simulator, appName]) {\r\n                return _this._registerUnloadEvents(middlewareAddress, simulator, appName);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Init component: \", error);\r\n                return Promise.reject(error);\r\n            });\r\n\r\n    },\r\n\r\n    /**\r\n     * Called when component is attached and when component data changes.\r\n     * Generally modifies the entity based on the data.\r\n     */\r\n    update: function (oldData) {\r\n        let _this = this;\r\n\r\n        this._interval = 1000 / this.data.rate;\r\n\r\n        this._registeredEventsPromise\r\n            .then(([middlewareAddress, simulator, appName]) => {\r\n                return _this.setTiltLimits(middlewareAddress, simulator, appName,\r\n                    _this.data.pitchforwardlimit, _this.data.pitchbackwardlimit, _this.data.rolllimit)\r\n            })\r\n            .then(([middlewareAddress, simulator, appName]) => {\r\n                return _this.setYawLimit(middlewareAddress, simulator, appName, _this.data.yawlimit);\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Updating component: \", error);\r\n            })\r\n    },\r\n\r\n    /**\r\n     * Called when a component is removed (e.g., via removeAttribute).\r\n     * Generally undoes all modifications to the entity.\r\n     */\r\n    remove: function () {\r\n        let _this = this;\r\n        this._registeredEventsPromise\r\n            .then(function ([middlewareAddress, simulator, appName]) {\r\n                _this.ready = false;\r\n                _this.stop(middlewareAddress, simulator, appName);\r\n                _this.exit(middlewareAddress, simulator, appName);\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Called on each scene tick.\r\n     */\r\n    tick: function (t) {\r\n        if (!this._ready) return;\r\n\r\n        // if (t - this._lastTick >= this._interval) {\r\n        let y = THREE.MathUtils.radToDeg(-this.el.object3D.rotation.y)\r\n        let p = THREE.MathUtils.radToDeg(this.el.object3D.rotation.x);\r\n        let r = THREE.MathUtils.radToDeg(this.el.object3D.rotation.z);\r\n        //fetch(this._middlewareAddress + \"/SET_POSITION/\" + y + \"/\" + p + \"/\" + r);\r\n        this.sendWebSocketMessage(y + \" \" + p + \" \" + r);\r\n\r\n        if (this.data.motioncompensation) {\r\n            let motion = this.yCurrent - this.yPrevious;\r\n           // if (motion > 1) console.log(\"motion: \", motion)\r\n            this.yPrevious = this.yCurrent;\r\n            this._cameraParent.object3D.rotation.y += THREE.MathUtils.degToRad(motion);\r\n            this._cameraParent.object3D.updateMatrix();\r\n            //console.log( this._cameraParent.object3D.rotation)\r\n        }\r\n        //}\r\n    },\r\n\r\n    /**\r\n     * Called when entity pauses.\r\n     * Use to stop or remove any dynamic or background behavior such as events.\r\n     */\r\n    pause: function () {\r\n        let _this = this;\r\n        this._registeredEventsPromise\r\n            .then(function ([middlewareAddress, simulator, appName]) {\r\n                this._socket.close();\r\n                return _this.stop(middlewareAddress, simulator, appName);\r\n            })\r\n            .then(function ([middlewareAddress, simulator, appName]) {\r\n                _this._ready = false;\r\n            })\r\n            .catch(error => {\r\n                console.error(error);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Called when entity resumes.\r\n     * Use to continue or add any dynamic or background behavior such as events.\r\n     */\r\n    play: function () {\r\n        let _this = this;\r\n\r\n        this._registeredEventsPromise\r\n            .then(function ([middlewareAddress, simulator, appName]) {\r\n                _this._socket = new WebSocket(\"wss://\" + middlewareAddress.substring(6));\r\n                _this.yCurrent = null;\r\n                _this.yPrevious = null;\r\n                _this._socket.addEventListener(\"open\", _this.onWebSocketOpen.bind(_this));\r\n\r\n                return _this.start(middlewareAddress, simulator, appName);\r\n            })\r\n            .then(function ([middlewareAddress, simulator, appName]) {\r\n                _this._ready = true;\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Playing component: \", error);\r\n            });\r\n    },\r\n    onWebSocketOpen: function () {\r\n        this._socket.addEventListener(\"message\", this.onWebSocketMessage.bind(this));\r\n    },\r\n    onWebSocketMessage: function (event) {\r\n        //console.log(\"Message from server \", event.data);\r\n        let data = event.data.split(\" \");\r\n\r\n        if (this.yPrevious == null) {\r\n            this.yPrevious = data[0];\r\n        }\r\n        this.yCurrent = data[0];\r\n    },\r\n\r\n    sendWebSocketMessage: function (data) {\r\n        this._socket.send(data);\r\n    },\r\n\r\n    _registerUnloadEvents: function (middlewareAddress, simulator, appName) {\r\n        console.info(\"Registering unload event.\")\r\n        window.addEventListener(\"beforeunload\", function (event) {\r\n            console.log(\"Unloading window\");\r\n            fetch(middlewareAddress + \"/stop/\", {keepalive: true})\r\n                .then(function (res) {\r\n                    return res.json()\r\n                })\r\n                .then(function (json) {\r\n                    console.log(json)\r\n                })\r\n                .catch(function (res) {\r\n                    console.log(res)\r\n                })\r\n\r\n            fetch(middlewareAddress + \"/exit/\", {keepalive: true})\r\n                .then(function (res) {\r\n                    return res.json()\r\n                })\r\n                .then(function (json) {\r\n                    console.log(json)\r\n                })\r\n                .catch(function (res) {\r\n                    console.log(res)\r\n                });\r\n\r\n        });\r\n\r\n        return Promise.resolve([middlewareAddress, simulator, appName]);\r\n    },\r\n\r\n\r\n    _findMiddleware: function (serviceDiscoveryAddress) {\r\n        return new Promise(function (resolve, reject) {\r\n            let interval = 2;\r\n            console.info(\"Using Service Discovery: \", serviceDiscoveryAddress)\r\n            setTimeout(search, interval);\r\n\r\n            function search() {\r\n                fetch(serviceDiscoveryAddress).then(function (page) {\r\n                    return page.json();\r\n                }).then(function (json) {\r\n                    //console.log(json);\r\n                    if (json.yawmiddleware) {\r\n                        console.info(\"Yaw Middleware found through service discovery: \", json.yawmiddleware);\r\n                        resolve(json.yawmiddleware.address);\r\n                        //begin(middleware.address);\r\n                    } else {\r\n                        interval = Math.min(interval * 2, 30);\r\n                        console.warn(\"Yaw Middleware not found through service discovery. Trying again in \", interval, \" seconds.\");\r\n                        setTimeout(search, interval * 1000);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n            }\r\n        });\r\n    },\r\n\r\n    _findSimulator: function (middlewareAddress, simulatorNameRegExp) {\r\n        return new Promise(function (resolve, reject) {\r\n            console.info(\"Asking Yaw Middleware: \", middlewareAddress, \" for existing simulators.\")\r\n            let interval = 2;\r\n            setTimeout(search, interval);\r\n\r\n            function search() {\r\n                fetch(middlewareAddress + \"/simulators\").then(function (data) {\r\n                    return data.json();\r\n                }).then(function (json) {\r\n                    let simulator = null;\r\n                    if (json.length > 0) {\r\n                        console.debug(\"Found simulators: \", json);\r\n                        json.forEach(sim => {\r\n                            if (sim.simulatorName.match(simulatorNameRegExp)) {\r\n                                console.info(\"Found simulator matching '\", simulatorNameRegExp, \"': \", sim);\r\n                                simulator = sim;\r\n                            }\r\n                        });\r\n                        //simulator = json[0];\r\n                    }\r\n                    if (simulator) {\r\n                        resolve([middlewareAddress, simulator]);\r\n                    } else {\r\n                        interval = Math.min(interval * 2, 30);\r\n                        console.warn(\"No simulators found through middleware. Asking again in \", interval, \" seconds.\");\r\n                        setTimeout(search, interval * 1000);\r\n                    }\r\n                }).catch(function (error) {\r\n                    console.log(error);\r\n                    reject(error);\r\n                });\r\n            }\r\n        });\r\n    },\r\n\r\n\r\n    connect: function (middlewareAddress, simulator) {\r\n        return new Promise((resolve, reject) => {\r\n            console.info(\"Connecting to: \" + simulator.simulatorId);\r\n            fetch(middlewareAddress + \"/connect/\" + simulator.simulatorId)\r\n                .then(function (resp) {\r\n                    return resp.json();\r\n                })\r\n                .then(function (json) {\r\n                    console.info(\"Connected to: \" + simulator.simulatorId);\r\n                    resolve([middlewareAddress, simulator])\r\n                })\r\n                .catch(error => {\r\n                    console.error(error);\r\n                    reject(error);\r\n                })\r\n        });\r\n    },\r\n\r\n\r\n    checkIn: function (middlewareAddress, simulator, appName) {\r\n        return new Promise((resolve, reject) => {\r\n            let appId = appName + crypto.randomUUID();\r\n            let checkedIn = false;\r\n            console.info(\"Checking in app: \", appId)\r\n            fetch(middlewareAddress + \"/checkin/\" + appId)\r\n                .then(function (res) {\r\n                    return res.json()\r\n                })\r\n                .then(function (json) {\r\n\r\n                    if (json.devicestatus == 'AVAILABLE') {\r\n                        checkedIn = true;\r\n                    }\r\n                    if (checkedIn) {\r\n                        console.info(\"Checked in: \", json)\r\n                        resolve([middlewareAddress, simulator, appId]);\r\n                    } else {\r\n                        console.warn(\"Could not check in: \", json)\r\n                        reject(json);\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.error(error)\r\n                    reject(error)\r\n                })\r\n        });\r\n    },\r\n\r\n\r\n    start: function (middlewareAddress, simulator, appName) {\r\n        return new Promise((resolve, reject) => {\r\n            console.info(\"Starting app: \", appName)\r\n            fetch(middlewareAddress + \"/start/\")\r\n                .then(function (res) {\r\n                    return res.json()\r\n                })\r\n                .then(function (json) {\r\n                    if (json.commandreceived == 'START') {\r\n                        console.info(\"Started\")\r\n                        resolve([middlewareAddress, simulator, appName]);\r\n                    } else {\r\n                        console.warn(\"Could not start\", json)\r\n                        reject(json);\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.error(error)\r\n                    reject(error)\r\n                })\r\n        });\r\n    },\r\n\r\n    stop: function (middlewareAddress, simulator, appName) {\r\n        return new Promise((resolve, reject) => {\r\n            console.info(\"Stopping app: \", appName)\r\n            fetch(middlewareAddress + \"/stop/\", {keepalive: true})\r\n                .then(function (res) {\r\n                    return res.json()\r\n                })\r\n                .then(function (json) {\r\n                    if (json.commandreceived == 'STOP') {\r\n                        console.info(\"Stopped\")\r\n                        resolve([middlewareAddress, simulator, appName]);\r\n                    } else {\r\n                        console.warn(\"Could not stop\", json)\r\n                        reject(json);\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.error(error)\r\n                    reject(error)\r\n                })\r\n        });\r\n    },\r\n\r\n\r\n    exit: function (middlewareAddress, simulator, appName) {\r\n        return new Promise((resolve, reject) => {\r\n            console.info(\"Exiting app: \", appName)\r\n            fetch(middlewareAddress + \"/exit/\", {keepalive: true})\r\n                .then(function (res) {\r\n                    return res.json()\r\n                })\r\n                .then(function (json) {\r\n                    if (json.commandreceived == 'EXIT') {\r\n                        console.info(\"Exited\")\r\n                        resolve([middlewareAddress, simulator, appName]);\r\n                    } else {\r\n                        console.warn(\"Could not exit\", json)\r\n                        reject(json);\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.error(error)\r\n                    reject(error)\r\n                })\r\n        });\r\n    },\r\n\r\n    setTiltLimits: function (middlewareAddress, simulator, appName, pitchForwardLimit, pitchBackwardLimit, rollLimit) {\r\n        return new Promise((resolve, reject) => {\r\n            console.info(\"Setting tilt limits for \", appName);\r\n            fetch(middlewareAddress + \"/set_tilt_limits/\" + pitchForwardLimit + \"/\" + pitchBackwardLimit + \"/\" + rollLimit)\r\n                .then(function (res) {\r\n                    return res.json()\r\n                })\r\n                .then(function (json) {\r\n                    if (json.commandreceived == 'SET_TILT_LIMITS') {\r\n                        console.info(\"Set tilt limits: \", json.pitchForwardLimit, json.pitchBackwardLimit, json.rollLimit)\r\n                        resolve([middlewareAddress, simulator, appName, json]);\r\n                    } else {\r\n                        console.warn(\"Could set tilt limits\", json)\r\n                        reject(json);\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.error(error)\r\n                    reject(error)\r\n                })\r\n        });\r\n    },\r\n\r\n\r\n    setYawLimit: function (middlewareAddress, simulator, appName, yawLimit) {\r\n        return new Promise((resolve, reject) => {\r\n            console.info(\"Setting yaw limit for \", appName);\r\n            fetch(middlewareAddress + \"/set_yaw_limit/\" + yawLimit)\r\n                .then(function (res) {\r\n                    return res.json()\r\n                })\r\n                .then(function (json) {\r\n                    if (json.commandreceived == 'SET_YAW_LIMIT') {\r\n                        console.info(\"Set yaw limits: \", json.yawLimit)\r\n                        resolve([middlewareAddress, simulator, appName, json]);\r\n                    } else {\r\n                        console.warn(\"Could set yaw limit\", json)\r\n                        reject(json);\r\n                    }\r\n                })\r\n                .catch(function (error) {\r\n                    console.error(error)\r\n                    reject(error)\r\n                })\r\n        });\r\n    }\r\n\r\n\r\n});\r\n\r\n\n\n//# sourceURL=webpack://aframe-yawvr-component/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});